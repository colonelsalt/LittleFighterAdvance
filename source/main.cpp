#include <tonc.h>

// This file is autogenerated from the file in the graphics folder
#include "metr.h"

OBJ_ATTR g_ObjBuffer[128];
OBJ_AFFINE *g_AffineObjBuffer = (OBJ_AFFINE*)g_ObjBuffer;

struct my_struct
{
	bool IsTrue;
};


OBJ_ATTR* LoadSprite(void)
{
	// Load tiles and palette of sprite into video and palete RAM
	memcpy32(&tile_mem[4][0], metrTiles, metrTilesLen / 4);
	memcpy32(pal_obj_mem, metrPal, metrPalLen / 4);

	oam_init(g_ObjBuffer, 128);

	OBJ_ATTR *Metroid = &g_ObjBuffer[0];
	obj_set_attr(Metroid,
		ATTR0_SQUARE,  // Square, regular sprite
		ATTR1_SIZE_64, // 64x64 pixels,
		ATTR2_PALBANK(0) | 0); // palette index 0, tile index 0

	// Set position
	obj_set_pos(Metroid, 176, 96);

	oam_copy(oam_mem, g_ObjBuffer, 1); // Update first OAM object

	return Metroid;
}

typedef unsigned int b32;

static b32 g_CanDraw;

void OnVBlank()
{
	if (g_CanDraw)
	{
		g_CanDraw = false;
		oam_copy(oam_mem, g_ObjBuffer, 1);
	}
}

int main(void)
{
	irq_init(NULL);
	irq_enable(II_VBLANK);
	irq_add(II_VBLANK, OnVBlank);

	tte_init_chr4c_default(0, BG_CBB(0) | BG_SBB(31));
	tte_set_pos(92, 68);
	tte_write("Hello World!");

	OBJ_ATTR* Sprite = LoadSprite();

	int BigNum = 10'000;

	my_struct Derp = {};
	Derp.IsTrue = true;

	REG_DISPCNT = DCNT_MODE0 | DCNT_BG0 | DCNT_OBJ | DCNT_OBJ_1D;
	
	int CameraX = 0;
	int PX = 0;
	int PY = 0;

	while (Derp.IsTrue && BigNum > 9'000)
	{
		CameraX = (CameraX + 1) % 240;

		key_poll();

		PX += key_tri_horz();
		PY += key_tri_vert();
		REG_BG0HOFS = CameraX;

		obj_set_pos(Sprite, PX, PY);

		g_CanDraw = true;
		VBlankIntrWait();
	}
}
