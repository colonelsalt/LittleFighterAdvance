#include <tonc.h>

#include "defines.h"

// This file is autogenerated from the file in the graphics folder
#include "freeze_0.h"

OBJ_ATTR g_ObjBuffer[128];
OBJ_AFFINE *g_AffineObjBuffer = (OBJ_AFFINE*)g_ObjBuffer;

struct player
{
	OBJ_ATTR* Sprite;
};

player LoadSprite(void)
{
	// Load tiles and palette of sprite into video and palete RAM
	memcpy32(&tile_mem[4][0], freeze_0Tiles, freeze_0TilesLen / 4);
	memcpy32(pal_obj_mem, freeze_0Pal, freeze_0PalLen / 4);

	oam_init(g_ObjBuffer, 128);
	
	player Player = {};

	Player.Sprite = &g_ObjBuffer[0];
	obj_set_attr(Player.Sprite,
		ATTR0_SQUARE,  // Square, regular sprite
		ATTR1_SIZE_64, // 64x64 pixels,
		ATTR2_PALBANK(0) | 0); // palette index 0, tile index 0

	// Set position
	obj_set_pos(Player.Sprite, 176, 96);

	oam_copy(oam_mem, g_ObjBuffer, 1); // Update first OAM object

	return Player;
}

static b32 g_CanDraw;

void OnVBlank()
{
	if (g_CanDraw)
	{
		g_CanDraw = false;
		oam_copy(oam_mem, g_ObjBuffer, 1);
	}
}

int main(void)
{
	irq_init(NULL);
	irq_enable(II_VBLANK);
	irq_add(II_VBLANK, OnVBlank);

	player Player = LoadSprite();

	REG_DISPCNT = DCNT_MODE0 | DCNT_BG0 | DCNT_OBJ | DCNT_OBJ_1D;
	
	v2 PlayerPos = {};

	while (true)
	{
		key_poll();

		PlayerPos.X += key_tri_horz();
		PlayerPos.Y += key_tri_vert();

		obj_set_pos(Player.Sprite, PlayerPos.X.WholePart, PlayerPos.Y.WholePart);

		g_CanDraw = true;
		VBlankIntrWait();
	}
}
