#include <tonc.h>

#include "maths.h"
#include "main.h"

#include "utility.h"

// This file is autogenerated from the file in the graphics folder
#include "freeze_0.h"

#include "forest_bg.h"


OBJ_ATTR g_ObjBuffer[128];
OBJ_AFFINE *g_AffineObjBuffer = (OBJ_AFFINE*)g_ObjBuffer;

static player LoadSprite(void)
{
	// Load tiles and palette of sprite into video and palete RAM
	memcpy32(&tile_mem[4][0], freeze_0Tiles + 4 * 64 * 32, freeze_0TilesLen / 4);
	memcpy32(pal_obj_mem, freeze_0Pal, freeze_0PalLen / 4);

	oam_init(g_ObjBuffer, 128);
	
	player Player = {};

	Player.Sprite = &g_ObjBuffer[0];
	obj_set_attr(Player.Sprite,
	             ATTR0_SQUARE,  // Square, regular sprite
	             ATTR1_SIZE_64, // 64x64 pixels,
	             ATTR2_PALBANK(0) | 0); // palette index 0, tile index 0

	oam_copy(oam_mem, g_ObjBuffer, 1); // Update first OAM object

	return Player;
}

static void LoadBackground(void)
{
	// Load palette
	memcpy32(pal_bg_mem, forest_bgPal, forest_bgPalLen / 4);
	// Load tiles into CBB 0
	memcpy32(&tile_mem[0][0], forest_bgTiles, forest_bgTilesLen / 4);
	// Load map into SBB 30
	memcpy32(&se_mem[30][0], forest_bgMap, forest_bgMapLen / 4);

	REG_BG0CNT = BG_CBB(0) | BG_SBB(30) | BG_4BPP | BG_REG_32x32;
}

static b32 g_CanDraw;

void OnVBlank()
{
	if (g_CanDraw)
	{
		g_CanDraw = false;
		oam_copy(oam_mem, g_ObjBuffer, 1);
	}
}

static const bg_map ForestMap = { 
	500, 100,
	0, 0
};

int main(void)
{
	irq_init(nullptr);
	irq_enable(II_VBLANK);
	irq_add(II_VBLANK, OnVBlank);

	player Player = LoadSprite();
	v2 PlayerStartPos = {};
	PlayerStartPos.X = 0;
	PlayerStartPos.Y = 90;
	
	Player.WorldPos = {};
	Player.Width = 64;
	Player.Height = 32;

	LoadBackground();

	REG_DISPCNT = DCNT_MODE0 | DCNT_BG0 | DCNT_OBJ | DCNT_OBJ_1D;

	v2 CameraPos = {};

	while (true)
	{
		key_poll();

		Player.WorldPos.X += key_tri_horz();
		if (Player.WorldPos.X < 0)
		{
			Player.WorldPos.X = 0;
		}
		if (Player.WorldPos.X > ForestMap.Width - (Player.Width / 2))
		{
			Player.WorldPos.X = ForestMap.Width - (Player.Width / 2);
		}

		Player.WorldPos.Y += key_tri_vert();
		if (Player.WorldPos.Y > ForestMap.Height - Player.Height)
		{
			Player.WorldPos.Y = ForestMap.Height - Player.Height;
		}
		if (Player.WorldPos.Y < 0)
		{
 			Player.WorldPos.Y = 0;
		}

		v2 PlayerScreenPos = PlayerStartPos;
		
		v2 Cutoff = {};
		Cutoff.X = ForestMap.Width - SCREEN_WIDTH;
		Cutoff.Y = ForestMap.Height - Player.Height;
		
		b32 ShouldCameraMoveX = true;
		b32 ShouldCameraMoveY = true;
		if (Player.WorldPos.X > Cutoff.X)
		{
			// If there's less than a screen's width left of the map, move the player across the screen
			PlayerScreenPos.X = Player.WorldPos.X - Cutoff.X;
			ShouldCameraMoveX = false;
		}
		if (Player.WorldPos.Y > Cutoff.Y)
		{
			PlayerScreenPos.Y = Player.WorldPos.Y - Cutoff.Y;
			ShouldCameraMoveY = false;
		}

		if (ShouldCameraMoveX)
		{
			// Otherwise, just move the camera
			CameraPos.X = Player.WorldPos.X;
		}
		if (ShouldCameraMoveY)
		{
			CameraPos.Y = Player.WorldPos.Y;
		}


		REG_BG0HOFS = CameraPos.X.WholePart;
		REG_BG0VOFS = CameraPos.Y.WholePart;

		SetObjPos(Player.Sprite, PlayerScreenPos);

		g_CanDraw = true;
		VBlankIntrWait();
	}
}
